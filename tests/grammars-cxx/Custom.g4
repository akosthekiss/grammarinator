/*
 * Copyright (c) 2017-2025 Renata Hodovan, Akos Kiss.
 *
 * Licensed under the BSD 3-Clause License
 * <LICENSE.rst or https://opensource.org/licenses/BSD-3-Clause>.
 * This file may not be copied, modified, or distributed except
 * according to those terms.
 */

/*
 * This test checks several customization features:
 *  - generation of custom code both into the headers and class bodies of
 *    unlexers/unparsers,
 *  - simple and list (vector) variables in rules and actions,
 *  - adding/overwriting nodes to/in the tree being generated by
 *    unlexers/unparsers,
 *  - overriding generated and inherited methods in hand-written subclassed
 *    unlexers/unparsers.
 *
 * Notes:
 *  - For this test, ANTLR is not invoked as the handling of
 *    variables/references in rules/actions is incompatible.
 */

// TEST-PROCESS-CXX: {grammar}.g4 -o {tmpdir}
// TEST-BUILD-CXX: --generator={grammar}Generator --includedir={tmpdir} --builddir={tmpdir}/build/G
// TEST-GENERATE-CXX: {tmpdir}/build/G/bin/grammarinator-generate-{grammar_lower} -r start -n 5 -o {tmpdir}/{grammar}G%d.txt
// TEST-BUILD-CXX: --generator={grammar}SubclassGenerator --includedir={tmpdir} --builddir={tmpdir}/build/S
// TEST-GENERATE-CXX: {tmpdir}/build/S/bin/grammarinator-generate-{grammar_lower}subclass -r start -n 5 -o {tmpdir}/{grammar}S%d.txt

grammar Custom;

@lexer::header {
#include <cassert>
#include <locale>
}

@lexer::members {
virtual std::string _custom_lexer_content() {
    return std::locale("").name();
}
}

@parser::header {
#include <grammarinator/util/random.hpp>
}

@parser::members {
int _custom_parser_uniform() {
    return grammarinator::util::random_int(0, 1);
}
}

start
  : tag
  | {_custom_parser_uniform()}? XML tag
  ;

tag
  : '<' remember=tagname '>' (cnt+=CONTENT)+ {assert(!$cnt.empty());} '</' tagname {static_cast<UnparserRule*>(current)->last_child()->replace($remember->clone());} '>'
  ;

tagname
  : ID
  ;

XML
  : '<?xml>'
  ;

ID
  : [a-z]+
  ;

CONTENT
  : '<![CDATA[' {static_cast<UnlexerRule*>(current)->src += _custom_lexer_content();} ']]>'
  ;
